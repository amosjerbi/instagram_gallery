name: Fetch Instagram Posts

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  fetch-posts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests Pillow
    
    - name: Create directories
      run: |
        mkdir -p assets/data/instagram
        mkdir -p assets/data/instagram/images
    
    - name: Initialize temp file
      run: |
        echo '{"data":[]}' > assets/data/temp-posts.json
    
    - name: Create Python script
      run: |
        cat > download_media.py << 'EOF'
        import json
        import os
        import requests
        from PIL import Image
        from io import BytesIO
        
        def download_media(url, post_id):
            try:
                response = requests.get(url)
                response.raise_for_status()
                
                # Save original image
                img = Image.open(BytesIO(response.content))
                img_path = f'assets/data/instagram/images/{post_id}.jpg'
                img.save(img_path, 'JPEG', quality=85)
                
                return f'/assets/data/instagram/images/{post_id}.jpg'
            except Exception as e:
                print(f"Error downloading media for post {post_id}: {e}")
                return None
        
        def process_posts(posts_file):
            with open(posts_file, 'r') as f:
                data = json.load(f)
            
            processed_posts = []
            for post in data['data']:
                if post['media_type'] in ['IMAGE', 'CAROUSEL_ALBUM']:
                    local_url = download_media(post['media_url'], post['id'])
                    if local_url:
                        post['media_url'] = local_url
                        processed_posts.append(post)
            
            data['data'] = processed_posts
            
            with open(posts_file, 'w') as f:
                json.dump(data, f, indent=2)
        
        if __name__ == '__main__':
            process_posts('assets/data/temp-posts.json')
        EOF
    
    - name: Fetch and process Instagram posts
      env:
        INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
      run: |
        NEXT_URL="https://graph.instagram.com/me/media?limit=50&fields=id,caption,media_type,media_url,permalink,timestamp&access_token=$INSTAGRAM_ACCESS_TOKEN"
        POSTS_COUNT=0
        MAX_POSTS=120
        
        while [ -n "$NEXT_URL" ] && [ $POSTS_COUNT -lt $MAX_POSTS ]; do
          # Fetch posts
          response=$(curl -s "$NEXT_URL")
          echo "$response" > assets/data/current-batch.json
          
          # Get next page URL
          NEXT_URL=$(echo "$response" | jq -r '.paging.next // empty')
          
          # Merge with existing posts
          jq -s '.[0].data + .[1].data | {data: .}' assets/data/temp-posts.json assets/data/current-batch.json > assets/data/merged.json
          mv assets/data/merged.json assets/data/temp-posts.json
          
          # Update count
          POSTS_COUNT=$(jq '.data | length' assets/data/temp-posts.json)
        done
        
        # Process media files
        python download_media.py
        
        # Move final file to destination
        mv assets/data/temp-posts.json assets/data/instagram-posts.json
        
        # Clean up
        rm -f assets/data/current-batch.json download_media.py
    
    - name: Commit and push changes
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add assets/data/instagram/
        git commit -m "Update Instagram posts" || echo "No changes to commit"
        git push
