name: Fetch Instagram Posts

on:
  push:
    branches:
      - gh-pages
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

jobs:
  fetch-instagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pillow

      - name: Fetch Instagram posts
        env:
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
        run: |
          # Create directories if they don't exist
          mkdir -p assets/data/instagram/{images,videos,thumbnails}
          
          # Initialize posts file with empty array
          echo '{"data":[]}' > assets/data/instagram-posts.json
          
          # Initialize variables
          NEXT_URL="https://graph.instagram.com/me/media?limit=50&fields=id,caption,media_type,media_url,thumbnail_url,permalink,timestamp,children{media_type,media_url,thumbnail_url}&access_token=$INSTAGRAM_ACCESS_TOKEN"
          POSTS_COUNT=0
          MAX_POSTS=120
          
          # Create Python script for downloading and processing media
          cat > process_media.py << 'EOF'
          import json
          import os
          import requests
          from PIL import Image
          from io import BytesIO
          
          def download_media(url, post_id, media_type, is_thumbnail=False):
              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  
                  if media_type in ['IMAGE', 'CAROUSEL_ALBUM'] or is_thumbnail:
                      # Save image or thumbnail
                      img = Image.open(BytesIO(response.content))
                      if is_thumbnail:
                          img_path = f'assets/data/instagram/thumbnails/{post_id}.jpg'
                      else:
                          img_path = f'assets/data/instagram/images/{post_id}.jpg'
                      img.save(img_path, 'JPEG', quality=85)
                  elif media_type in ['VIDEO', 'REEL']:
                      # Save video file
                      video_path = f'assets/data/instagram/videos/{post_id}.mp4'
                      with open(video_path, 'wb') as f:
                          f.write(response.content)
                      return f'/assets/data/instagram/videos/{post_id}.mp4'
                  
                  return f'/assets/data/instagram/{"thumbnails" if is_thumbnail else "images"}/{post_id}.jpg'
              except Exception as e:
                  print(f"Error downloading media for post {post_id}: {e}")
                  return None
          
          def process_posts(posts_file):
              with open(posts_file, 'r') as f:
                  data = json.load(f)
              
              processed_posts = []
              for post in data.get('data', []):
                  try:
                      if post['media_type'] == 'CAROUSEL_ALBUM' and 'children' in post:
                          # Process each item in the carousel
                          children_media = []
                          for i, child in enumerate(post['children'].get('data', [])):
                              child_url = download_media(
                                  child['media_url'],
                                  f"{post['id']}_{i}",
                                  child['media_type']
                              )
                              if child_url:
                                  children_media.append({
                                      'media_type': child['media_type'],
                                      'media_url': child_url
                                  })
                          post['children_media'] = children_media
                      elif post['media_type'] in ['VIDEO', 'REEL']:
                          # Download video and thumbnail
                          video_url = download_media(post['media_url'], post['id'], post['media_type'])
                          if 'thumbnail_url' in post:
                              thumbnail_url = download_media(
                                  post['thumbnail_url'],
                                  f"{post['id']}_thumb",
                                  post['media_type'],
                                  True
                              )
                              if thumbnail_url:
                                  post['thumbnail_url'] = thumbnail_url
                          if video_url:
                              post['media_url'] = video_url
                      else:
                          # Handle single image
                          local_url = download_media(post['media_url'], post['id'], post['media_type'])
                          if local_url:
                              post['media_url'] = local_url
                      
                      processed_posts.append(post)
                  except Exception as e:
                      print(f"Error processing post {post.get('id', 'unknown')}: {e}")
                      continue
              
              return {'data': processed_posts}
          
          if __name__ == '__main__':
              import sys
              input_file = sys.argv[1]
              output_file = sys.argv[2]
              
              processed_data = process_posts(input_file)
              
              with open(output_file, 'w') as f:
                  json.dump(processed_data, f, indent=2)
          EOF
          
          # Fetch and process posts
          while [ -n "$NEXT_URL" ] && [ $POSTS_COUNT -lt $MAX_POSTS ]; do
            echo "Fetching posts from: $NEXT_URL"
            
            # Fetch current batch
            curl -s "$NEXT_URL" > assets/data/current-batch.json
            
            # Check if the request was successful
            if [ ! -s assets/data/current-batch.json ]; then
              echo "Error: Empty response from Instagram API"
              exit 1
            fi
            
            # Validate JSON structure
            if ! jq empty assets/data/current-batch.json 2>/dev/null; then
              echo "Error: Invalid JSON response from Instagram API"
              exit 1
            fi
            
            # Process the current batch
            python process_media.py assets/data/current-batch.json assets/data/processed-batch.json
            
            # Merge with existing posts
            jq -s '
              .[0].data + .[1].data | 
              unique_by(.id) | 
              {data: .}
            ' assets/data/instagram-posts.json assets/data/processed-batch.json > assets/data/merged.json
            
            # Update posts file
            mv assets/data/merged.json assets/data/instagram-posts.json
            
            # Get next page URL and update count
            NEXT_URL=$(jq -r '.paging.next // empty' assets/data/current-batch.json)
            POSTS_COUNT=$(jq '.data | length' assets/data/instagram-posts.json)
            
            echo "Processed $POSTS_COUNT posts so far"
          done
          
          # Clean up temporary files
          rm -f assets/data/current-batch.json assets/data/processed-batch.json process_media.py

      - name: Commit and push if there are changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add assets/data/instagram-posts.json assets/data/instagram/{images,videos,thumbnails}
          git commit -m "Update Instagram posts" || exit 0
          git push
