name: Fetch Instagram Posts

on:
  push:
    branches:
      - gh-pages
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run at midnight UTC every day

permissions:
  contents: write
  actions: write

jobs:
  fetch-instagram:
    runs-on: ubuntu-latest
    environment: github-pages
    env:
      INSTAGRAM_TOKEN: ${{ secrets.INSTAGRAM_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Verify secrets
        run: |
          if [ -z "$INSTAGRAM_TOKEN" ]; then
            echo "::error::INSTAGRAM_TOKEN is not set. Please add it to your repository secrets."
            echo "To add the secret:"
            echo "1. Go to your repository settings"
            echo "2. Click on 'Secrets and variables' under 'Security'"
            echo "3. Click on 'Actions'"
            echo "4. Click 'New repository secret'"
            echo "5. Add INSTAGRAM_TOKEN with your Instagram token"
            exit 1
          fi
          echo "Instagram token is properly set"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install requests pillow

      - name: Debug environment
        run: |
          pwd
          ls -la
          echo "Current branch:"
          git branch --show-current
          echo "Git status:"
          git status
          echo "Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "JQ version:"
          jq --version

      - name: Test Instagram API
        run: |
          echo "Testing Instagram API access..."
          RESPONSE=$(curl -s "https://graph.instagram.com/me?fields=id,username&access_token=$INSTAGRAM_TOKEN")
          if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
            echo "::error::Error accessing Instagram API:"
            echo "$RESPONSE" | jq '.error'
            exit 1
          fi
          echo "Instagram API access successful"
          echo "Connected as: $(echo "$RESPONSE" | jq -r '.username')"

      - name: Create directories
        run: |
          mkdir -p data/instagram/images
          echo '{"data":[]}' > data/temp-posts.json

      - name: Fetch Instagram posts
        run: |
          set -x  # Enable debug mode
          
          # Initialize variables
          NEXT_URL="https://graph.instagram.com/me/media?limit=50&fields=id,caption,media_type,media_url,thumbnail_url,permalink,timestamp&access_token=$INSTAGRAM_TOKEN"
          POSTS_COUNT=0
          MAX_POSTS=120
          
          # Create Python script to download and process media
          cat > download_media.py << 'EOF'
          import json
          import os
          import requests
          from PIL import Image
          from io import BytesIO
          import sys
          import traceback
          
          def download_media(url, post_id, media_type, thumbnail_url=None):
              try:
                  print(f"Downloading {media_type} from {url}")
                  
                  if media_type in ['IMAGE', 'CAROUSEL_ALBUM']:
                      # Save image
                      response = requests.get(url)
                      response.raise_for_status()
                      img = Image.open(BytesIO(response.content))
                      img_path = f'data/instagram/images/{post_id}.jpg'
                      img.save(img_path, 'JPEG', quality=85)
                      print(f"Successfully saved image to {img_path}")
                      return f'data/instagram/images/{post_id}.jpg'
                  elif media_type == 'VIDEO':
                      # For videos, save the thumbnail and return both URLs
                      if thumbnail_url:
                          response = requests.get(thumbnail_url)
                          response.raise_for_status()
                          img = Image.open(BytesIO(response.content))
                          img_path = f'data/instagram/images/{post_id}_thumb.jpg'
                          img.save(img_path, 'JPEG', quality=85)
                          print(f"Successfully saved video thumbnail to {img_path}")
                          return {
                              'video_url': url,
                              'thumbnail_url': f'data/instagram/images/{post_id}_thumb.jpg'
                          }
                      return {
                          'video_url': url,
                          'thumbnail_url': None
                      }
                  else:
                      print(f"Unsupported media type: {media_type}")
                      return None
                      
              except Exception as e:
                  print(f"Error downloading media for post {post_id}: {e}")
                  traceback.print_exc()
                  return None
          
          def process_posts(posts_file):
              try:
                  print(f"Processing posts from {posts_file}")
                  with open(posts_file, 'r') as f:
                      data = json.load(f)
                  
                  for post in data['data']:
                      media_type = post.get('media_type', '')
                      if media_type in ['IMAGE', 'CAROUSEL_ALBUM', 'VIDEO']:
                          result = download_media(
                              post['media_url'], 
                              post['id'], 
                              media_type,
                              post.get('thumbnail_url')
                          )
                          if result:
                              if isinstance(result, dict):
                                  post['media_url'] = result['video_url']
                                  post['thumbnail_url'] = result['thumbnail_url']
                              else:
                                  post['media_url'] = result
                              # Add media_type to help frontend handle different types
                              post['media_type'] = media_type
                  
                  with open(posts_file, 'w') as f:
                      json.dump(data, f, indent=2)
                  print("Successfully processed all posts")
              except Exception as e:
                  print(f"Error processing posts: {e}")
                  traceback.print_exc()
                  sys.exit(1)
          
          if __name__ == '__main__':
              process_posts('data/temp-posts.json')
          EOF
          
          # Function to merge posts
          merge_posts() {
            local temp_file="$1"
            local new_posts="$2"
            if ! jq -s '.[0].data + .[1].data | {data: .}' "$temp_file" "$new_posts" 2>/dev/null; then
              echo "Error merging posts"
              echo "temp_file contents:"
              cat "$temp_file"
              echo "new_posts contents:"
              cat "$new_posts"
              return 1
            fi
          }
          
          while [ -n "$NEXT_URL" ] && [ $POSTS_COUNT -lt $MAX_POSTS ]; do
            echo "Fetching from URL: $NEXT_URL"
            
            # Fetch posts
            RESPONSE=$(curl -s "$NEXT_URL")
            
            # Check for API errors
            if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
              echo "Error from Instagram API:"
              echo "$RESPONSE" | jq '.error'
              exit 1
            fi
            
            echo "$RESPONSE" > data/current-batch.json
            
            # Get next page URL
            NEXT_URL=$(echo "$RESPONSE" | jq -r '.paging.next // empty')
            
            # Merge with existing posts
            if ! merge_posts data/temp-posts.json data/current-batch.json > data/merged.json; then
              echo "Error merging posts"
              exit 1
            fi
            mv data/merged.json data/temp-posts.json
            
            # Update count
            POSTS_COUNT=$(jq '.data | length' data/temp-posts.json)
            echo "Fetched $POSTS_COUNT posts"
          done
          
          # Download and process media files
          echo "Starting media download..."
          python download_media.py
          
          # Move final file to destination
          mv data/temp-posts.json data/instagram.json
          
          # Clean up temporary files
          rm -f data/current-batch.json download_media.py
          
          echo "Process completed successfully"

      - name: List generated files
        run: |
          echo "Contents of data/instagram:"
          ls -la data/instagram || true
          echo "Contents of data:"
          ls -la data || true
          echo "First few lines of instagram.json:"
          head -n 20 data/instagram.json || true

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push if there are changes
        run: |
          git add data/instagram.json data/instagram/images/ || true
          git status
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Instagram posts [skip ci]"
            git push
          fi